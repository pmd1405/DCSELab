import numpy as np

# Dữ liệu
data = [0.15, 0.15, 0.15, 0.14, 0.15, 0.15, 0.15, 0.14, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.16, 0.16, 0.16, 0.16, 0.17, 0.17, 0.1775, 0.19, 0.19, 0.21, 0.22, 0.25, 0.59, 1.13, 1.51, 1.74, 1.89, 1.96, 1.97, 1.93, 1.86, 1.79, 1.7, 1.68, 1.74, 1.82, 1.87, 1.91, 1.93, 1.96, 1.97, 1.97, 1.97, 1.97, 1.96, 1.96, 1.95, 1.93, 1.91, 1.89, 1.87, 1.85, 1.84, 1.82, 1.81, 1.81, 1.79, 1.79, 1.76, 1.74, 1.73, 1.69, 1.66, 1.62, 1.58, 1.52, 1.44, 1.27, 1, 0.58, 0.26, 0.22, 0.21, 0.21, 0.19, 0.18, 0.17, 0.16, 0.16, 0.16, 0.15, 0.15, 0.15, 0.14, 0.14, 0.14, 0.14, 0.14, 0.14, 0.14, 0.14, 0.14, 0.14]
data9tb = [0.15, 0.145, 0.15, 0.145, 0.15, 0.15, 0.15, 0.145, 0.15, 0.15, 0.15, 0.15, 0.15, 0.145, 0.15, 0.155, 0.16, 0.155, 0.16, 0.16, 0.165, 0.17, 0.175, 0.185, 0.185, 0.205, 0.215, 0.24, 0.445, 0.985, 1.405, 1.685, 1.85, 1.945, 1.965, 1.94, 1.875, 1.805, 1.725, 1.675, 1.72, 1.795, 1.855, 1.905, 1.93, 1.96, 1.965, 1.97, 1.975, 1.97, 1.965, 1.96, 1.95, 1.935, 1.915, 1.9, 1.88, 1.855, 1.845, 1.825, 1.815, 1.81, 1.795, 1.79, 1.765, 1.745, 1.735, 1.7, 1.67, 1.63, 1.59, 1.54, 1.47, 1.32, 1.085, 0.705, 0.3, 0.23, 0.215, 0.205, 0.185, 0.175, 0.17, 0.16, 0.16, 0.16, 0.15, 0.15, 0.15, 0.145, 0.14, 0.145, 0.14, 0.14, 0.14, 0.14, 0.14, 0.14, 0.14]
data10 = [0.15, 0.15, 0.15, 0.14, 0.15, 0.15, 0.15, 0.14, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.16, 0.16, 0.16, 0.16, 0.17, 0.17, 0.18, 0.19, 0.19, 0.21, 0.22, 0.25, 0.59, 1.13, 1.51, 1.74, 1.89, 1.96, 1.97, 1.93, 1.86, 1.79, 1.7, 1.68, 1.74, 1.82, 1.87, 1.91, 1.93, 1.96, 1.97, 1.97, 1.97, 1.97, 1.96, 1.96, 1.95, 1.93, 1.91, 1.89, 1.87, 1.85, 1.84, 1.82, 1.81, 1.81, 1.79, 1.79, 1.76, 1.74, 1.73, 1.69, 1.66, 1.62, 1.58, 1.52, 1.44, 1.27, 1, 0.58, 0.26, 0.22, 0.21, 0.21, 0.19, 0.18, 0.17, 0.16, 0.16, 0.16, 0.15, 0.15, 0.15, 0.14, 0.14, 0.14, 0.14, 0.14, 0.14, 0.14, 0.14, 0.14, 0.14]
data10tb = [0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.155, 0.15, 0.15, 0.155, 0.155, 0.16, 0.155, 0.16, 0.165, 0.17, 0.17, 0.18, 0.19, 0.195, 0.205, 0.225, 0.26, 0.635, 1.205, 1.635, 1.95, 2.165, 2.29, 2.35, 2.355, 2.34, 2.3, 2.245, 2.225, 2.255, 2.3, 2.345, 2.38, 2.4, 2.42, 2.425, 2.435, 2.44, 2.435, 2.43, 2.425, 2.41, 2.405, 2.395, 2.375, 2.36, 2.35, 2.34, 2.325, 2.31, 2.3, 2.29, 2.275, 2.265, 2.24, 2.215, 2.175, 2.145, 2.095, 2.035, 1.94, 1.79, 1.555, 1.195, 0.71, 0.295, 0.225, 0.21, 0.2, 0.19, 0.175, 0.175, 0.17, 0.165, 0.16, 0.155, 0.155, 0.155, 0.15, 0.15, 0.15, 0.145, 0.145, 0.145, 0.145, 0.15, 0.145, 0.145, 0.15]
data12 = [0.16, 0.16, 0.16, 0.17, 0.16, 0.16, 0.16, 0.16, 0.16, 0.16, 0.16, 0.16, 0.16, 0.16, 0.17, 0.17, 0.17, 0.17, 0.17, 0.18, 0.18, 0.19, 0.19, 0.2, 0.21, 0.22, 0.25, 0.5, 1.1, 1.6, 1.97, 2.25, 2.45, 2.58, 2.65, 2.68, 2.68, 2.66, 2.64, 2.65, 2.68, 2.71, 2.75, 2.77, 2.78, 2.8, 2.81, 2.81, 2.81, 2.81, 2.8, 2.81, 2.79, 2.78, 2.78, 2.76, 2.74, 2.73, 2.72, 2.71, 2.7, 2.68, 2.67, 2.66, 2.63, 2.61, 2.57, 2.53, 2.47, 2.39, 2.28, 2.1, 1.82, 1.48, 1.03, 0.51, 0.25, 0.23, 0.21, 0.2, 0.19, 0.19, 0.18, 0.17, 0.18, 0.17, 0.17, 0.16, 0.15, 0.16, 0.16, 0.16, 0.16, 0.15, 0.16, 0.16, 0.16, 0.16, 0.15, 0.15]
data12tb = [0.155, 0.155, 0.16, 0.165, 0.155, 0.155, 0.16, 0.155, 0.155, 0.155, 0.155, 0.155, 0.16, 0.16, 0.17, 0.165, 0.165, 0.17, 0.17, 0.18, 0.175, 0.185, 0.185, 0.195, 0.2, 0.215, 0.24, 0.39, 0.93, 1.46, 1.86, 2.175, 2.395, 2.54, 2.63, 2.67, 2.68, 2.665, 2.645, 2.64, 2.67, 2.7, 2.735, 2.76, 2.775, 2.795, 2.8, 2.81, 2.81, 2.81, 2.805, 2.805, 2.79, 2.78, 2.78, 2.76, 2.745, 2.735, 2.72, 2.71, 2.7, 2.685, 2.67, 2.66, 2.635, 2.61, 2.575, 2.54, 2.485, 2.405, 2.31, 2.145, 1.9, 1.58, 1.155, 0.645, 0.28, 0.225, 0.21, 0.2, 0.19, 0.19, 0.175, 0.175, 0.175, 0.17, 0.165, 0.16, 0.155, 0.155, 0.155, 0.16, 0.155, 0.15, 0.155, 0.155, 0.155, 0.155, 0.15, 0.15]
data = [0.12, 0.12, 0.11, 0.12, 0.13, 0.12, 0.12, 0.13, 0.13, 0.14, 0.15, 0.16, 0.16, 0.17, 0.19, 0.21, 0.23, 0.34, 0.67, 0.89, 1.04, 1.15, 1.22, 1.28, 1.31, 1.34, 1.37, 1.39, 1.41, 1.43, 1.44, 1.46, 1.46, 1.47, 1.46, 1.47, 1.47, 1.48, 1.49, 1.48, 1.45, 1.43, 1.4, 1.37, 1.35, 1.33, 1.31, 1.29, 1.27, 1.24, 1.2, 1.17, 1.13, 1.1, 1.06, 1.01, 0.97, 0.91, 0.8, 0.62, 0.37, 0.24, 0.21, 0.19, 0.18, 0.16, 0.16, 0.15, 0.14, 0.14, 0.13, 0.13, 0.12, 0.12, 0.13, 0.12, 0.11, 0.11, 0.11, 0.11, 0.11, 0.12, 0.11, 0.11]

# Tính đạo hàm
derivatives = np.gradient(data, 0.5)

# Xác định các điểm có sự thay đổi rõ rệt (tính đạo hàm vượt qua một ngưỡng)
threshold = 0.015 # Ngưỡng đạo hàm
change_points = [i for i, d in enumerate(derivatives) if abs(d) > threshold]
# Xác định các điểm không thay đổi trong vùng điểm thay đổi
stay_points = []
for i in range(1, len(change_points)):
    stay_points.extend(range(change_points[i-1]+1, change_points[i]))

# In ra các điểm không thay đổi
print("Các điểm không thay đổi:")
for point in stay_points:
    print("Điểm không thay đổi:", point, "- Giá trị:", data[point-1], data[point], data[point+1])


# In ra các điểm có sự thay đổi rõ rệt và không thay đổi
print("Các điểm có sự thay đổi rõ rệt:")
for point in change_points:
    print("Điểm thay đổi:", point, "- Giá trị:", data[point-1], data[point], data[point+1])


# Sắp xếp dữ liệu
sorted_data = sorted(data)

# Tính phân vị 25%, 50% (trung vị), và 75%
Q1 = np.percentile(sorted_data, 25)
Q3 = np.percentile(sorted_data, 75)

# Tính khoảng IQR
IQR = Q3 - Q1

# Xác định ngưỡng cho điểm ngoại vi
k = 1.5  # Hệ số thường là 1.5 hoặc 3
lower_threshold = Q1 - k * IQR
upper_threshold = Q3 + k * IQR

# Xác định các điểm ngoại vi
outliers = [x for x in data if x < lower_threshold or x > upper_threshold]

print("Các điểm ngoại vi:")
print(outliers)